{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectUser","query","status","queryChange","statusChange","filteredTodos","filter","todo","title","toLowerCase","includes","completed","onSubmit","event","preventDefault","name","type","value","className","placeholder","onChange","required","map","key","id","readOnly","userId","onClick","defaultProps","BASE_URL","getUser","fetch","then","response","json","result","data","CurrentUser","state","user","this","props","setState","prevProps","clear","email","phone","React","Component","App","selectedUserId","target","trimLeft","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd80a56b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  query,\n  status,\n  queryChange,\n  statusChange,\n}) => {\n  let filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n\n  if (status === 'active') {\n    filteredTodos = filteredTodos.filter(todo => !todo.completed);\n  } else if (status === 'completed') {\n    filteredTodos = todos.filter(todo => todo.completed);\n  }\n\n  return (\n    <>\n      <h2>Todos</h2>\n      <form onSubmit={(event) => {\n        event.preventDefault();\n      }}\n      >\n        <input\n          name=\"filterTodos\"\n          type=\"text\"\n          value={query}\n          className=\"queryTitle\"\n          placeholder=\"filter by title\"\n          onChange={event => (queryChange(event))}\n          required\n        />\n        <select\n          name=\"select\"\n          value={status}\n          onChange={event => statusChange(event)}\n        >\n          <option value=\"All\">\n            Show all\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n        {filteredTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={`TodoList__item ${todo.completed === false\n              ? 'TodoList__item--unchecked'\n              : 'TodoList__item--checked'}`\n            }\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              value={todo.userId}\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </form>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  query: PropTypes.string,\n  status: PropTypes.string,\n  queryChange: PropTypes.func.isRequired,\n  statusChange: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  query: '',\n  status: '',\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(id) {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clear } = this.props;\n\n    return (!user)\n      ? 'Empty'\n      : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {userId}\n            </span>\n            <button\n              className=\"button button-clear\"\n              type=\"button\"\n              onClick={clear}\n            >\n              Clear\n            </button>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n          <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n          <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n        </div>\n      );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    phone: PropTypes.string,\n  }),\n};\n\nCurrentUser.defaultProps = {\n  user: {},\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: '',\n    query: '',\n    status: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.userId !== null),\n      }));\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clear = () => {\n    this.setState({ selectedUserId: '' });\n  }\n\n  queryChange = (event) => {\n    this.setState({ query: event.target.value.trimLeft() });\n  }\n\n  statusChange = (event) => {\n    this.setState({ status: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, query, status } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            query={query}\n            status={status}\n            statusChange={this.statusChange}\n            queryChange={this.queryChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}