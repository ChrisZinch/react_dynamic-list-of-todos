{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","status","this","props","todos","selectUser","filteredTodos","filter","todo","title","toLowerCase","includes","filteredByStatus","completed","onSubmit","event","preventDefault","name","type","value","className","placeholder","onChange","setState","target","trimLeft","required","map","key","id","readOnly","userId","onClick","React","Component","BASE_URL","getUser","fetch","then","response","json","result","data","CurrentUser","user","prevProps","clear","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc9b489a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    status: '',\n  }\n\n  render() {\n    const { query, status } = this.state;\n    const { todos, selectUser } = this.props;\n    let filteredTodos = todos;\n\n    if (query) {\n      filteredTodos = todos.filter(todo => (\n        todo.title.toLowerCase().includes(query.toLowerCase())\n      ));\n    }\n\n    let filteredByStatus = filteredTodos;\n\n    if (status === 'active') {\n      filteredByStatus = filteredTodos.filter(todo => !todo.completed);\n    } else if (status === 'completed') {\n      filteredByStatus = todos.filter(todo => todo.completed);\n    }\n\n    return (\n      <>\n        <h2>Todos</h2>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n        }}\n        >\n          <input\n            name=\"filterTodos\"\n            type=\"text\"\n            value={query}\n            className=\"queryTitle\"\n            placeholder=\"filter by title\"\n            onChange={event => (\n              this.setState({\n                query: event.target.value.trimLeft(),\n              })\n            )}\n            required\n          />\n          <select\n            name=\"select\"\n            value={status}\n            onChange={event => (\n              this.setState({\n                status: event.target.value,\n              })\n            )}\n          >\n            <option value=\"All\">\n              Show all\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n          {filteredByStatus.map(todo => (\n            <li\n              key={todo.id}\n              className={`TodoList__item ${todo.completed === false\n                ? 'TodoList__item--unchecked'\n                : 'TodoList__item--checked'}`\n              }\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                value={todo.userId}\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </form>\n      </>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(id) {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: [],\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n          <button\n            className=\"button button-clear\"\n            type=\"button\"\n            onClick={clear}\n          >\n            Clear\n          </button>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.userId !== null),\n      }));\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}